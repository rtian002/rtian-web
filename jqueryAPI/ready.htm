<script src="js/rtian.js" ></script>
<meta charset="utf-8" />
<title>.ready() | jQuery API中文文档(适用jQuery 1.0 - jQuery 3.0)</title>
  <div id="content" >
<div class="inner" role="main"><article id="post-503" class="post-503 post type-post status-publish format-standard hentry category-document-loading category-10">
  <header class="entry-header">
    <h1 class="entry-title">.ready()</h1>
    <hr>
<div class="entry-meta">
      分类: <span class="category">
<a href="events.htm"  title="View all posts in Events">事件</a> &gt; 
<a href="document-loading.htm"  title="View all posts in Document Loading">文档加载</a></span>   </div><!-- .entry-meta -->
      </header><!-- .entry-header -->
  <div class="entry-content">
    <article id="ready1" class="entry method"><h2 class="section-title">
<span class="name">.ready( handler )</span><span class="returns">返回: 
<a href="Types.htm#jQuery" >jQuery</a></span>
</h2>
<div class="entry-wrapper">
<p class="desc"><strong>描述: </strong>当DOM准备就绪时，指定一个函数来执行。</p>
<ul class="signatures"><li class="signature" id="ready-handler">
<h4 class="name">
<span class="version-details">添加的版本: 
<a href="1.0.htm" >1.0</a></span>.ready( handler )</h4>
<ul><li>
<div><strong>handler</strong></div>
<div>类型: 
<a href="Types.htm#Function" >Function</a>()</div>
<div>当DOM准备就绪时，执行的一个函数。</div>
</li></ul>
</li></ul>
<div class="longdesc" id="entry-longdesc">
  <p><code>.ready()</code>方法提供了一种方法，使得一旦页面的文档对象模型（DOM）变为安全的操纵，就立即运行JavaScript代码。这往往是执行与页面的用户视图或交互之前需要任务的好时机，例如添加事件处理程序和初始化插件。当多个函数通过连续调用添加到该方法中，它们根据它们被添加的DOM准备就绪的顺序执行。在jQuery 3.0中，jQuery保证了在一个处理程序中的异常发生，不会妨碍后续添加的处理程序的执行。</p>
<p>大多数浏览器提供了 <code>DOMContentLoaded</code> 事件形式的
<a href="http://caniuse.com/#search=DOMContentLoaded">类似功能</a>。
然而，jQuery的 <code>.ready()</code> 方法的不同之处在于它是一个重要并且有效的方法：在代码调用<code>.ready( handler )</code>之前，如果 DOM 已经准备就绪并且浏览器已经触发<code>DOMContentLoaded</code>，<code>handler</code>处理函数仍然会被执行。 相反，如果 <code>DOMContentLoaded</code> 事件侦听器在这个事件触发后才被添加进来，那么这个<code>DOMContentLoaded</code> 事件的处理程序将永远不会被执行。</p>
 <p>浏览器还提供了 <code>window</code> 对象上的<code>load</code>事件。当这个事件触发时候，表明该网页上的所有资源已加载，包括图像。此事件可以使用jQuery的<code>$( window ).on( "load", handler )</code>监听。当代码依赖加载的资源情况下，（例如，必需知道图像的尺寸时），那么代码应放置在一个 <code>load</code>事件的处理程序中。</p>
<p>值得注意的是，虽然 DOM 准备就绪（ready）总是在页面被完全加载之前，但是在已经生效执行的 <code>.ready()</code> 处理程序代码中绑定<code>load</code>事件侦听器，通常是<em>不安全的</em>。例如，在页面加载后，可以使用一些方法动态加载脚本，如<code>$.getScript()</code> 。虽然动态加载的脚本中的 <code>.ready()</code> 处理程序始终会被执行，
但是在动态加载脚本中的 <code>window</code> 的 <code>load</code> 事件已经触发过了，所以那些<code>load</code> 事件监听器将永远不会运行。</p>
<p>jQuery提供了几种方法来绑定函数，当DOM已准备就绪时，绑定的函数将会运行。以下所有语法是等价的：</p>
<ul>
    <li><code>$( handler )</code></li>
    <li><code>$( document ).ready( handler )</code></li>
    <li><code>$( "document" ).ready( handler )</code></li>
    <li><code>$( "img" ).ready( handler )</code></li>
    <li><code>$().ready( handler )</code></li>
  </ul>
<p>
在jQuery 3.0 中，只建议使用第一种语法（即 <code>$( handler )</code>）;
其他语法仍然能正常工作，但已被标记为弃用（将来的某个版本会被删除）。这是因为，这些选择器跟<code>.ready()</code>方法的行为没有任何关系，这是低效的，并可能导致对该方法行为不正确的假设。例如，第三条语法中，<code>"document"</code>选择器其实什么也没选择。第四语法表示等待文档（ <code>document</code> ）准备就绪，但从代码上看，它暗示（错误地）等待图像（<code>"img"</code>）准备就绪。 </p>
<p>还有 <code>$(document).on( "ready", handler )</code>,<em>从jQuery 1.8开始已被标记为弃用，在jQuery 3.0中已经被删除</em>。请注意，如果附加此事件之前，DOM 已经准备就绪，该处理程序<em>将不被执行</em>。</p>
<p><code>.ready()</code> 方法通常用于一个匿名函数：</p>
<div class="syntaxhighlighter javascript">
	<table>
		<tbody>
			<tr>
				<td class="gutter">
						<div class="line n1">1</div>
						<div class="line n2">2</div>
						<div class="line n3">3</div>
				</td>
				<td class="code">
					<pre><div class="container"><div class="line"><code>$( document ).ready(<span class="keyword">function</span>() {</code></div></div><div class="container"><div class="line"><code>  <span class="comment">// Handler for .ready() called.</span></code></div></div><div class="container"><div class="line"><code>});</code></div></div></pre>
				</td>
			</tr>
		</tbody>
	</table>
</div>
<p>这等价于调用推荐的方式：</p>
<div class="syntaxhighlighter javascript">
	<table>
		<tbody>
			<tr>
				<td class="gutter">
						<div class="line n1">1</div>
						<div class="line n2">2</div>
						<div class="line n3">3</div>
				</td>
				<td class="code">
					<pre><div class="container"><div class="line"><code>$(<span class="keyword">function</span>() {</code></div></div><div class="container"><div class="line"><code>  <span class="comment">// Handler for .ready() called.</span></code></div></div><div class="container"><div class="line"><code>});</code></div></div></pre>
				</td>
			</tr>
		</tbody>
	</table>
</div>
<h4>在 jQuery 对象别名 上使用 </h4>
<p>当<code>$</code>快捷方式不再可用时，<code>
<a href="jQuery.noConflict.htm" >$.noConflict()</a></code>可以用于避免命名空间冲突。然而，传递给<code>.ready()</code> 的处理函数可以传递一个引用<code>jQuery</code>对象的参数。这使得处理程序中能够使用jQuery对象，例如，用作<code>$</code>,这样就可以不用关心它的别名：</p>
<div class="syntaxhighlighter javascript">
	<table>
		<tbody>
			<tr>
				<td class="gutter">
						<div class="line n1">1</div>
						<div class="line n2">2</div>
						<div class="line n3">3</div>
						<div class="line n4">4</div>
				</td>
				<td class="code">
					<pre><div class="container"><div class="line"><code>jq2 = jQuery.noConflict();</code></div></div><div class="container"><div class="line"><code>jq2(<span class="keyword">function</span>( $ ) {</code></div></div><div class="container"><div class="line"><code>  <span class="comment">// 在这个代码块中可以像往常一样使用 $ ;实际的jQuery 对象是 jq2 </span></code></div></div><div class="container"><div class="line"><code>});</code></div></div></pre>
				</td>
			</tr>
		</tbody>
	</table>
</div>
  </div>
<div class="jquery-api-top">
</div>
<section class="entry-examples" id="entry-examples"><header><h2 class="underline">例子:</h2></header><div class="entry-example" id="example-0">
<h4><span class="desc">显示当DOM加载的信息。</span></h4>
<div class="syntaxhighlighter xml ">
  <table>
    <tbody>
      <tr>
        <td class="gutter">
            <div class="line n1">1</div>
            <div class="line n2">2</div>
            <div class="line n3">3</div>
            <div class="line n4">4</div>
            <div class="line n5">5</div>
            <div class="line n6">6</div>
            <div class="line n7">7</div>
            <div class="line n8">8</div>
            <div class="line n9">9</div>
            <div class="line n10">10</div>
            <div class="line n11">11</div>
            <div class="line n12">12</div>
            <div class="line n13">13</div>
            <div class="line n14">14</div>
            <div class="line n15">15</div>
            <div class="line n16">16</div>
            <div class="line n17">17</div>
        </td>
        <td class="code">
          <pre><div class="container"><div class="line"><code><span class="doctype">&lt;!DOCTYPE html&gt;</span></code></div></div><div class="container"><div class="line"><code><span class="tag">&lt;<span class="title">html</span>&gt;</span></code></div></div><div class="container"><div class="line"><code><span class="tag">&lt;<span class="title">head</span>&gt;</span></code></div></div><div class="container"><div class="line"><code>  <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"><span class="tag">p</span> <span class="rules">{ <span class="rule"><span class="attribute">color</span>:<span class="value">red;</span></span> <span class="rule">}</span></span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></code></div></div><div class="container"><div class="line"><code>  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://code.jquery.com/jquery-latest.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></code></div></div><div class="container"><div class="line"><code>  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></code></div></div><div class="container"><div class="line"><code>  $(document).ready(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span></code></div></div><div class="container"><div class="line"><code>  $(<span class="string">"p"</span>).text(<span class="string">"The DOM is now loaded and can be manipulated."</span>);</code></div></div><div class="container"><div class="line"><code>});</code></div></div><div class="container"><div class="line"><code>  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></code></div></div><div class="container"><div class="line"><code> </code></div></div><div class="container"><div class="line"><code><span class="tag">&lt;/<span class="title">head</span>&gt;</span></code></div></div><div class="container"><div class="line"><code><span class="tag">&lt;<span class="title">body</span>&gt;</span></code></div></div><div class="container"><div class="line"><code>  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Not loaded yet.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></code></div></div><div class="container"><div class="line"><code> </code></div></div><div class="container"><div class="line"><code><span class="tag">&lt;/<span class="title">body</span>&gt;</span></code></div></div><div class="container"><div class="line"><code><span class="tag">&lt;/<span class="title">html</span>&gt;</span></code></div></div></pre>
        </td>
      </tr>
    </tbody>
  </table>
</div>
<h4>Demo:</h4>
<div class="demo code-demo"></div>
</div></section>
</div></article>  </div><!-- .entry-content -->
</article>        
</div>
  </div>
