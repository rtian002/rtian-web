<script src="js/rtian.js" ></script>
<meta charset="utf-8" />
<title>deferred.always() | jQuery API中文文档(适用jQuery 1.0 - jQuery 3.0)</title>
  <div id="content" >
<div class="inner" role="main"><article id="post-115" class="post-115 post type-post status-publish format-standard hentry category-deferred-object category-16">
  <header class="entry-header">
    <h1 class="entry-title">deferred.always()</h1>
    <hr>
<div class="entry-meta">
      分类: <span class="category">
<a href="deferred-object.htm"  title="View all posts in Deferred Object">延迟对象</a></span>   </div><!-- .entry-meta -->
      </header><!-- .entry-header -->
  <div class="entry-content">
    <article id="deferred-always1" class="entry method"><h2 class="section-title">
<span class="name">deferred.always( alwaysCallbacks [, alwaysCallbacks ] )</span><span class="returns">返回: 
<a href="Types.htm#Deferred" >Deferred</a></span>
</h2>
<div class="entry-wrapper">
<p class="desc"><strong>描述: </strong> 
当Deferred（延迟）对象解决或拒绝时，调用添加处理程序。 </p>
<ul class="signatures"><li class="signature" id="deferred-always-alwaysCallbacks-alwaysCallbacks">
<h4 class="name">
<span class="version-details">添加的版本: 
<a href="1.6.htm" >1.6</a></span>deferred.always( alwaysCallbacks [, alwaysCallbacks ] )</h4>
<ul>
<li>
<div><strong>alwaysCallbacks</strong></div>
<div>类型: 
<a href="Types.htm#Function" >Function</a>()</div>
<div>一个函数，或者函数数组，当Deferred（延迟）对象得到解决或拒绝时被调用。</div>
</li>
<li>
<div><strong>alwaysCallbacks</strong></div>
<div>类型: 
<a href="Types.htm#Function" >Function</a>()</div>
<div>可选的一个函数，或者函数数组，当Deferred（延迟）对象得到解决或拒绝时被调用。
      </div>
</li>
</ul>
</li></ul>
<div class="longdesc" id="entry-longdesc">
    <p>参数可以是一个函数或一个函数的数组。当Deferred（延迟）得到解决或者拒绝时，<code> alwaysCallbacks </code>始终都会被执行。由于的<code> deferred.always()</code>返回Deferred（延迟）对象，所以可以链接其它的Deferred（延迟）对象，包括额外的<code>.always()</code>的方法。当Deferred（延迟）得到解决或者拒绝，回调将按他们顺序被执行，并且可以使用传递给如下方法的参数：<code>
<a href="deferred.resolve.htm" >resolve</a></code> ， 
<a href="deferred.reject.htm" ><code>reject</code></a> ， 
<a href="deferred.resolveWith.htm" ><code>resolveWith</code></a>或
<a href="deferred.rejectWith.htm" ><code>rejectWith</code></a>。有关详细信息，请参阅文件
<a href="deferred-object.htm" >Deferred（延迟） 对象</a> 。
    </p>
    <p><strong>注意:</strong>
        <code>deferred.always()</code>方法接收了<code>Deferred</code>对象<code>.resolve()</code>或<code>.reject()</code>使用的参数， 这往往是非常不同的。
        为此， 最好的只用它的行为，而不去检查他的参数。
         在大多数情况下，
        使用显式 
<a href="deferred.done.htm" ><code>.done()</code></a> 或 
<a href="deferred.fail.htm" ><code>.fail()</code></a>处理程序，因为他们的参数都是已知的。</p>
  </div>
<div class="jquery-api-top">
</div>
<section class="entry-examples" id="entry-examples"><header><h2 class="underline">例子:</h2></header><div class="entry-example" id="example-0">
<h4><span class="desc">jQuery.get（）方法返回一个来自一个Deferred（延迟）对象的jqXHR对象，我们可以附加一个成功和错误使用deferred.always（）方法的回调。</span></h4>
<div class="syntaxhighlighter javascript ">
  <table>
    <tbody>
      <tr>
        <td class="gutter">
            <div class="line n1">1</div>
            <div class="line n2">2</div>
            <div class="line n3">3</div>
        </td>
        <td class="code">
          <pre><div class="container"><div class="line"><code>$.get(<span class="string">"test.php"</span>).always( <span class="keyword">function</span>() {</code></div></div><div class="container"><div class="line"><code>  alert(<span class="string">"$.get completed with success or error callback arguments"</span>);</code></div></div><div class="container"><div class="line"><code>} );</code></div></div></pre>
        </td>
      </tr>
    </tbody>
  </table>
</div>
</div></section>
</div></article>  </div><!-- .entry-content -->
</article>        
</div>
  </div>
