<script src="js/rtian.js" ></script>
<meta charset="utf-8" />
<title>deferred.notifyWith() | jQuery API中文文档(适用jQuery 1.0 - jQuery 3.0)</title>
  <div id="content" >
<div class="inner" role="main"><article id="post-127" class="post-127 post type-post status-publish format-standard hentry category-deferred-object category-17">
  <header class="entry-header">
    <h1 class="entry-title">deferred.notifyWith()</h1>
    <hr>
<div class="entry-meta">
      分类: <span class="category">
<a href="deferred-object.htm"  title="View all posts in Deferred Object">延迟对象</a></span>   </div><!-- .entry-meta -->
      </header><!-- .entry-header -->
  <div class="entry-content">
    <article id="deferred-notifyWith1" class="entry method"><h2 class="section-title">
<span class="name">deferred.notifyWith( context [, args ] )</span><span class="returns">返回: 
<a href="Types.htm#Deferred" >Deferred</a></span>
</h2>
<div class="entry-wrapper">
<p class="desc"><strong>描述: </strong> 
  根据给定的上下文（context）和<code>args</code>递延调用Deferred（延迟）对象上进行中的回调（progressCallbacks ）。 </p>
<ul class="signatures"><li class="signature" id="deferred-notifyWith-context-args">
<h4 class="name">
<span class="version-details">添加的版本: 
<a href="1.7.htm" >1.7</a></span>deferred.notifyWith( context [, args ] )</h4>
<ul>
<li>
<div><strong>context</strong></div>
<div>类型: 
<a href="Types.htm#Object" >Object</a>
</div>
<div>
        Context（上下文） 作为this对象传递给进行中的回调（progressCallbacks ）
      </div>
</li>
<li>
<div><strong>args</strong></div>
<div>类型: 
<a href="Types.htm#Array" >Array</a>
</div>
<div>
        一个可选的参数数组传递给进行中的回调（progressCallbacks）。
      </div>
</li>
</ul>
</li></ul>
<div class="longdesc" id="entry-longdesc">
    <p>通常情况下，只有递延对象（Deferred）的创建者才能调用此方法;
        您可以通过
<a href="deferred.promise.htm" ><code>deferred.promise()</code></a>返回的受限制的 Promise 对象，来防止其他代码改变递延的状态 。
        </p>
        <div class="warning">
            
                <p>jQuery提供的
<a href="deferred.promise.htm" ><code>deferred.promise()</code></a>方法的作用是，在原来的Deferred 对象上返回另一个 Deferred 对象，即受限制的 Promise 对象，受限制的 Promise 对象只开放与改变执行状态无关的方法（比如done()方法和fail()方法），屏蔽与改变执行状态有关的方法（比如resolve()方法和reject()方法），从而使得执行状态不能被改变。
                </p>
            <p>首先看一个 Deferred对象的执行状态被改变的例子：
<a href="http://jsbin.com/zapeve/1/" target="_blank">http://jsbin
                .com/zapeve/1/</a>;<br>代码的尾部加了一行dtd.resolve()，这就改变了dtd对象的执行状态，因此导致done()方法立刻执行</p>
            <p>再看一个 Deferred对象返回<code>deferred.promise()</code>的例子：
<a href="http://jsbin.com/fuvude/1/" target="_blank">http://jsbin.com/fuvude/1/</a>;<br>wait()函数返回的是promise对象。然后，我们把回调函数绑定在这个对象上面，而不是原来的deferred对象上面。这样的好处是，无法改变promise对象的执行状态，要想改变执行状态，只能操作原来的deferred对象。</p>
            </div>
<p>
当 <code>deferred.notifyWith</code> 被调用时，任何通过 
<a href="deferred.then.htm" ><code>deferred.then</code></a> 或 
<a href="deferred.progress.htm" ><code>deferred.progress</code></a> 添加的 progressCallbacks，都会被调用。回调函数的执行顺序和它们被添加的顺序是一样的。传递给 <code>.notifyWith()</code>的<code>args</code> 参数，会传到每个回调函数中。当迟延对象已经被 resolved 或被 rejected 之后，再调用任何 <code>.notifyWith()</code>  (或者添加 progressCallbacks) 都会被忽略。
  欲了解更多信息，请参阅文档
<a href="deferred-object.htm" >延迟对象</a>.</p>
  </div>
</div></article>  </div><!-- .entry-content -->
</article>        
</div>
  </div>
