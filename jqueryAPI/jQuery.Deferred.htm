<script src="js/rtian.js" ></script>
<meta charset="utf-8" />
<title>jQuery.Deferred() | jQuery API中文文档(适用jQuery 1.0 - jQuery 3.0)</title>
  <div id="content" >
<div class="inner" role="main"><article id="post-311" class="post-311 post type-post status-publish format-standard hentry category-deferred-object category-15">
	<header class="entry-header">
		<h1 class="entry-title">jQuery.Deferred()</h1>
		<hr>
<div class="entry-meta">
			分类: <span class="category">
<a href="deferred-object.htm"  title="View all posts in Deferred Object">延迟对象</a></span>		</div><!-- .entry-meta -->
			</header><!-- .entry-header -->
	<div class="entry-content">
		<article id="jQuery-Deferred1" class="entry method"><h2 class="section-title">
<span class="name">jQuery.Deferred(  [beforeStart ] )</span><span class="returns">返回: 
<a href="Types.htm#Deferred" >Deferred</a></span>
</h2>
<div class="entry-wrapper">
<p class="desc"><strong>描述: </strong> 一个工厂函数，这个函数返回一个链式实用对象，用返回对象方法来在回调队列中注册多个回调， 调用回调队列，传递任何同步或异步函数的成功或失败状态。</p>
<ul class="signatures"><li class="signature" id="jQuery-Deferred-beforeStart">
<h4 class="name">
<span class="version-details">添加的版本: 
<a href="1.5.htm" >1.5</a></span>jQuery.Deferred(  [beforeStart ] )</h4>
<ul><li>
<div><strong>beforeStart</strong></div>
<div>类型: 
<a href="Types.htm#Function" >Function</a>( 
<a href="Types.htm#Deferred" >Deferred</a> deferred )</div>
<div>一个构造函数返回之前调用的函数。
      </div>
</li></ul>
</li></ul>
<div class="longdesc" id="entry-longdesc">
    <p>
    	<code>jQuery.Deferred()</code>工厂函数创建一个新的<code>deferred</code>对象。<del><code>new</code> 运算是可选的。</del></p>
    <p>
<code>jQuery.Deferred</code>方法可以传递一个可选的函数，
这个函数在方法返回之前调用，并且传递新的 <code>deferred</code>（延迟）对象作为 <code>this</code>对象作为第一个参数传递给函数。例如，被调用的函数可以使用 
<a href="deferred.then.htm" ><code>deferred.then()</code></a>绑定回调。
    	</p>
    <p>
    	一个Deferred（延迟）对象开始于<em>pending</em>状态。
任何回调使用
<a href="deferred.then.htm" ><code>deferred.then()</code></a>, 
<a href="deferred.always.htm" ><code>deferred.always()</code></a>, 
<a href="deferred.done.htm" ><code>deferred.done()</code></a>, 或者 
<a href="deferred.fail.htm" ><code>deferred.fail()</code></a>添加到这个对象都是排队等待执行。调用
<a href="deferred.resolve.htm" ><code>deferred.resolve()</code></a> 或者 
<a href="deferred.resolveWith.htm" ><code>deferred.resolveWith()</code></a>转换Deferred（递延）到<em>resolved</em>（解决）的状态，并立即执行设置中任何的<code>doneCallbacks</code>。调用
<a href="deferred.reject.htm" ><code>deferred.reject()</code></a> 或者 
<a href="deferred.rejectWith.htm" ><code>deferred.rejectWith()</code></a>转换Deferred（递延）到<em>rejected</em>（拒绝）的状态，并立即执行设置中任何的<code>failCallbacks</code>。一旦对象已经进入了解决或拒绝状态，它处于该状态。回调仍然可以添加到解决或拒绝Deferred（递延） - 他们会立即执行。</p>
    <h4>
      Enhanced Callbacks with jQuery 
    </h4>
    <p>
    	在JavaScript中很常见，有选择地在函数中接受被调用的回调函数。例如，
到jQuery1.5之前的版本中，异步流程比如<code>jQuery.ajax()</code>，接受回调函数有时候在不久的将来调用Ajax请求成功时，错误，和完成。</p>
    <p><code>jQuery.Deferred()</code> introduces several enhancements to the way callbacks are managed and invoked. In particular, <code>jQuery.Deferred()</code> provides flexible ways to provide multiple callbacks, and these callbacks can be invoked regardless of whether the original callback dispatch has already occurred. jQuery Deferred is based on the 
<a href="http://wiki.commonjs.org/wiki/Promises/A">CommonJS Promises/A</a> design.</p>
    <p>One model for understanding Deferred is to think of it as a chain-aware function wrapper. The 
<a href="deferred.then.htm" ><code>deferred.then()</code></a>, 
<a href="deferred.always.htm" ><code>deferred.always()</code></a>, 
<a href="deferred.done.htm" ><code>deferred.done()</code></a>, and 
<a href="deferred.fail.htm" ><code>deferred.fail()</code></a> methods specify the functions to be called and the 
<a href="deferred.resolve.htm" ><code>deferred.resolve(args)</code></a> or 
<a href="deferred.reject.htm" ><code>deferred.reject(args)</code></a> methods "call" the functions with the arguments you supply. Once the Deferred has been resolved or rejected it stays in that state; a second call to <code>deferred.resolve()</code>, for example, is ignored. If more functions are added by <code>deferred.then()</code>, for example, after the Deferred is resolved, they are called immediately with the arguments previously provided.</p>
    <p>In most cases where a jQuery API call returns a Deferred or Deferred-compatible object, such as 
<a href="jQuery.ajax.htm" ><code>jQuery.ajax()</code></a> or 
<a href="jQuery.when.htm" ><code>jQuery.when()</code></a>, you will only want to use the 
<a href="deferred.then.htm" ><code>deferred.then()</code></a>, 
<a href="deferred.done.htm" ><code>deferred.done()</code></a>, and 
<a href="deferred.fail.htm" ><code>deferred.fail()</code></a> methods to add callbacks to the Deferred's queues. The internals of the API call or code that created the Deferred will invoke 
<a href="deferred.resolve.htm" ><code>deferred.resolve()</code></a> or 
<a href="deferred.reject.htm" ><code>deferred.reject()</code></a> on the deferred at some point, causing the appropriate callbacks to run.</p>
  </div>
</div></article>	</div><!-- .entry-content -->
</article>        
</div>
  </div>
