<script src="js/rtian.js" ></script>
<meta charset="utf-8" />
<title>deferred.isRejected() | jQuery API中文文档(适用jQuery 1.0 - jQuery 3.0)</title>
  <div id="content" >
<div class="inner" role="main"><article id="post-121" class="post-121 post type-post status-publish format-standard hentry category-deferred-object category-15">
	<header class="entry-header">
		<h1 class="entry-title">deferred.isRejected()</h1>
		<hr>
<div class="entry-meta">
			分类: <span class="category">
<a href="deferred-object.htm"  title="View all posts in Deferred Object">延迟对象</a></span>		</div><!-- .entry-meta -->
			</header><!-- .entry-header -->
	<div class="entry-content">
		<article id="deferred-isRejected1" class="entry method"><h2 class="section-title">
<span class="name">deferred.isRejected()</span><span class="returns">返回: 
<a href="Types.htm#Boolean" >Boolean</a></span><span class="version-details">version deprecated: 
<a href="1.7.htm" >1.7</a>, removed: 
<a href="1.8.htm" >1.8</a></span>
</h2>
<div class="entry-wrapper">
<p class="desc"><strong>描述: </strong> 确定一个Deferred（延迟）对象是否已被拒绝。 </p>
<ul class="signatures"><li class="signature" id="deferred-isRejected">
<h4 class="name">
<span class="version-details">添加的版本: 
<a href="1.5.htm" >1.5</a></span>deferred.isRejected()</h4>
<ul><li><div class="null-signature">这个方法不接受任何参数</div></li></ul>
</li></ul>
<div class="longdesc" id="entry-longdesc">
    <p>
    	从jQuery1.7开始，这个 API已经过时;
请使用
<a href="deferred.state.htm" ><code>deferred.state()</code></a> 代替。</p>
<p>如果Deferred（延迟）对象是在被拒绝的状态，则返回<code>true</code>，这意味着要么<code>
<a href="deferred.reject.htm" >deferred.reject()</a></code>或者<code>
<a href="deferred.rejectWith.htm" >deferred.rejectWith()</a></code>已经在对象上被调用过，并且 failCallbacks 已经被调用过（或者正处于被调用的阶段）。</p>
<p>请注意，Deferred（延迟）对象可以有三种状态：挂起（pending），解决（resolved），或拒绝（rejected）;使用<code>
<a href="deferred.isResolved.htm" >deferred.isResolved()</a></code>来判断延迟对象是否在解决状态。这些方法在调试时非常有用，例如，以确定是否递延已经解决，即使你在代码中打算拒绝。
</p>
</div>
</div></article>	</div><!-- .entry-content -->
</article>        
</div>
  </div>
